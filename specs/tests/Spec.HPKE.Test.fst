module Spec.HPKE.Test

#reset-options "--z3rlimit 100 --fuel 0 --ifuel 0"

open FStar.Mul
open Lib.IntTypes
open Lib.RawIntTypes
open Lib.Sequence
open Lib.ByteSequence

module HPKE = Spec.Agile.HPKE
module DH = Spec.Agile.DH
module AEAD = Spec.Agile.AEAD
module Hash = Spec.Agile.Hash

// Test1: A.1, DHKEM(Curve25519), HKDF-SHA256, AES-GCM-128
// mode: 3
// kemID: 2
// kdfID: 1
// aeadID: 1
// AuthPSK Setup

let test1_cs = DH.DH_Curve25519, AEAD.AES128_GCM, Hash.SHA2_256

let test1_info = List.Tot.map u8_from_UInt8 [
  0x4fuy; 0x64uy; 0x65uy; 0x20uy; 0x6fuy;
  0x6euy; 0x20uy; 0x61uy; 0x20uy; 0x47uy;
  0x72uy; 0x65uy; 0x63uy; 0x69uy; 0x61uy;
  0x6euy; 0x20uy; 0x55uy; 0x72uy; 0x6euy
]

let test1_skR = List.Tot.map u8_from_UInt8 [
  0x2duy; 0x7cuy; 0x73uy; 0x91uy; 0x95uy;
  0xbauy; 0x10uy; 0x22uy; 0x16uy; 0xdeuy;
  0x16uy; 0x2fuy; 0x94uy; 0x35uy; 0x99uy;
  0x1auy; 0xa3uy; 0xaduy; 0x42uy; 0xaeuy;
  0xefuy; 0xdbuy; 0x7euy; 0x22uy; 0x39uy;
  0x1auy; 0xe3uy; 0x4buy; 0xaeuy; 0x7euy;
  0x5auy; 0x13uy
]

let test1_skI = List.Tot.map u8_from_UInt8 [
  0x59uy; 0xc7uy; 0x7fuy; 0x57uy; 0x34uy;
  0xaeuy; 0xf3uy; 0x69uy; 0xf3uy; 0x0duy;
  0x83uy; 0xc7uy; 0xe3uy; 0x0cuy; 0x6buy;
  0xf3uy; 0x72uy; 0xe1uy; 0x20uy; 0x39uy;
  0x1cuy; 0xdauy; 0xf1uy; 0x3fuy; 0x34uy;
  0xc9uy; 0x15uy; 0x03uy; 0x02uy; 0x84uy;
  0xb7uy; 0x5duy
]

let test1_skE = List.Tot.map u8_from_UInt8 [
  0x68uy; 0x27uy; 0xbbuy; 0xf4uy; 0xf7uy;
  0xebuy; 0xd0uy; 0x18uy; 0x2auy; 0x8euy;
  0xbcuy; 0x0euy; 0xa3uy; 0x64uy; 0xc7uy;
  0xdduy; 0xaeuy; 0x1duy; 0x1cuy; 0x8auy;
  0x4fuy; 0x58uy; 0xa9uy; 0x03uy; 0xfauy;
  0x9fuy; 0x9fuy; 0x9duy; 0x42uy; 0x28uy;
  0xb1uy; 0x26uy
]

let test1_psk = List.Tot.map u8_from_UInt8 [
  0x6duy; 0x65uy; 0x6cuy; 0x6cuy; 0x6fuy; 0x6euy
]

let test1_pskID = List.Tot.map u8_from_UInt8 [
  0x45uy; 0x6euy; 0x6euy; 0x79uy; 0x6euy;
  0x20uy; 0x44uy; 0x75uy; 0x72uy; 0x69uy;
  0x6euy; 0x20uy; 0x61uy; 0x72uy; 0x61uy;
  0x6euy; 0x20uy; 0x4duy; 0x6fuy; 0x72uy;
  0x69uy; 0x61uy
]

let test1_pkR = List.Tot.map u8_from_UInt8 [
  0xccuy; 0x98uy; 0x0duy; 0xf0uy; 0x6euy;
  0x53uy; 0x2buy; 0xdbuy; 0x6buy; 0x95uy;
  0x7fuy; 0x9fuy; 0x5auy; 0x5cuy; 0xafuy;
  0x55uy; 0xc5uy; 0x5fuy; 0x46uy; 0x82uy;
  0x2cuy; 0xdfuy; 0xbduy; 0x97uy; 0xe7uy;
  0x6fuy; 0x6auy; 0xd4uy; 0xc6uy; 0x2buy;
  0x32uy; 0x2buy
]

let test1_pkI = List.Tot.map u8_from_UInt8 [
  0xdbuy; 0x6euy; 0xe4uy; 0xa5uy; 0x32uy;
  0x76uy; 0xb7uy; 0xbcuy; 0x90uy; 0x65uy;
  0x7cuy; 0xdduy; 0xe5uy; 0x14uy; 0xf9uy;
  0x48uy; 0xafuy; 0x83uy; 0xc1uy; 0x40uy;
  0x54uy; 0x07uy; 0x97uy; 0xecuy; 0x71uy;
  0x78uy; 0x81uy; 0x49uy; 0x0auy; 0xfeuy;
  0xd9uy; 0x21uy
]

let test1_pkE = List.Tot.map u8_from_UInt8 [
  0xbcuy; 0x09uy; 0xd6uy; 0x6auy; 0x6euy;
  0x8auy; 0x77uy; 0xceuy; 0x2fuy; 0xe3uy;
  0xbfuy; 0x66uy; 0x03uy; 0xf2uy; 0x27uy;
  0xd5uy; 0xc6uy; 0x73uy; 0xf5uy; 0x32uy;
  0x9auy; 0x3cuy; 0x9auy; 0xd0uy; 0x31uy;
  0xbbuy; 0xdfuy; 0xaduy; 0xbcuy; 0x9buy;
  0x1duy; 0x28uy
]

let test1_enc = List.Tot.map u8_from_UInt8 [
  0xbcuy; 0x09uy; 0xd6uy; 0x6auy; 0x6euy;
  0x8auy; 0x77uy; 0xceuy; 0x2fuy; 0xe3uy;
  0xbfuy; 0x66uy; 0x03uy; 0xf2uy; 0x27uy;
  0xd5uy; 0xc6uy; 0x73uy; 0xf5uy; 0x32uy;
  0x9auy; 0x3cuy; 0x9auy; 0xd0uy; 0x31uy;
  0xbbuy; 0xdfuy; 0xaduy; 0xbcuy; 0x9buy;
  0x1duy; 0x28uy
]

let test1_zz = List.Tot.map u8_from_UInt8 [
  0xfbuy; 0x90uy; 0x7auy; 0xabuy; 0xc5uy;
  0xe9uy; 0xe0uy; 0x3fuy; 0x96uy; 0x65uy;
  0xc9uy; 0x37uy; 0x60uy; 0x6cuy; 0x46uy;
  0xd8uy; 0xdauy; 0x49uy; 0x32uy; 0x38uy;
  0x0duy; 0x29uy; 0x7auy; 0x35uy; 0xe0uy;
  0xc6uy; 0xaauy; 0x3fuy; 0xf6uy; 0x41uy;
  0xffuy; 0x34uy; 0x96uy; 0x95uy; 0x5fuy;
  0xfduy; 0x7fuy; 0x90uy; 0x8cuy; 0xd9uy;
  0xf8uy; 0xa4uy; 0x76uy; 0xcduy; 0x23uy;
  0x0duy; 0xe6uy; 0x14uy; 0xd6uy; 0x0fuy;
  0xa4uy; 0xbduy; 0xf5uy; 0x99uy; 0xcauy;
  0x23uy; 0x85uy; 0x80uy; 0xccuy; 0xcduy;
  0x7auy; 0x7euy; 0x7buy; 0x7fuy
]

let test1_context = List.Tot.map u8_from_UInt8 [
  0x03uy; 0x00uy; 0x02uy; 0x00uy; 0x01uy;
  0x00uy; 0x01uy; 0xbcuy; 0x09uy; 0xd6uy;
  0x6auy; 0x6euy; 0x8auy; 0x77uy; 0xceuy;
  0x2fuy; 0xe3uy; 0xbfuy; 0x66uy; 0x03uy;
  0xf2uy; 0x27uy; 0xd5uy; 0xc6uy; 0x73uy;
  0xf5uy; 0x32uy; 0x9auy; 0x3cuy; 0x9auy;
  0xd0uy; 0x31uy; 0xbbuy; 0xdfuy; 0xaduy;
  0xbcuy; 0x9buy; 0x1duy; 0x28uy; 0xccuy;
  0x98uy; 0x0duy; 0xf0uy; 0x6euy; 0x53uy;
  0x2buy; 0xdbuy; 0x6buy; 0x95uy; 0x7fuy;
  0x9fuy; 0x5auy; 0x5cuy; 0xafuy; 0x55uy;
  0xc5uy; 0x5fuy; 0x46uy; 0x82uy; 0x2cuy;
  0xdfuy; 0xbduy; 0x97uy; 0xe7uy; 0x6fuy;
  0x6auy; 0xd4uy; 0xc6uy; 0x2buy; 0x32uy;
  0x2buy; 0xdbuy; 0x6euy; 0xe4uy; 0xa5uy;
  0x32uy; 0x76uy; 0xb7uy; 0xbcuy; 0x90uy;
  0x65uy; 0x7cuy; 0xdduy; 0xe5uy; 0x14uy;
  0xf9uy; 0x48uy; 0xafuy; 0x83uy; 0xc1uy;
  0x40uy; 0x54uy; 0x07uy; 0x97uy; 0xecuy;
  0x71uy; 0x78uy; 0x81uy; 0x49uy; 0x0auy;
  0xfeuy; 0xd9uy; 0x21uy; 0xecuy; 0xa9uy;
  0x94uy; 0xd5uy; 0x16uy; 0x10uy; 0x8auy;
  0x16uy; 0xdbuy; 0x86uy; 0xe1uy; 0x55uy;
  0x39uy; 0x0fuy; 0x3cuy; 0x3cuy; 0xecuy;
  0x6fuy; 0x0auy; 0xffuy; 0x60uy; 0xaduy;
  0xe1uy; 0xaeuy; 0x9euy; 0x31uy; 0x89uy;
  0x14uy; 0x0buy; 0x0fuy; 0x3duy; 0xeauy;
  0x55uy; 0xc4uy; 0x04uy; 0x06uy; 0x29uy;
  0xc6uy; 0x4cuy; 0x5euy; 0xfeuy; 0xc2uy;
  0xf7uy; 0x23uy; 0x04uy; 0x07uy; 0xd6uy;
  0x12uy; 0xd1uy; 0x62uy; 0x89uy; 0xd7uy;
  0xc5uy; 0xd7uy; 0xafuy; 0xcfuy; 0x93uy;
  0x40uy; 0x28uy; 0x0auy; 0xbduy; 0x2duy;
  0xe1uy; 0xabuy;
]

let test1_secret = List.Tot.map u8_from_UInt8 [
  0x59uy; 0x80uy; 0xd0uy; 0x41uy; 0xd0uy;
  0x34uy; 0x3auy; 0xe0uy; 0xeeuy; 0x09uy;
  0x93uy; 0x2cuy; 0x03uy; 0xeauy; 0x7cuy;
  0x3euy; 0x38uy; 0x3fuy; 0x30uy; 0xfduy;
  0x55uy; 0xefuy; 0x4duy; 0x66uy; 0xc7uy;
  0x45uy; 0x9euy; 0x01uy; 0xa7uy; 0x86uy;
  0x83uy; 0xeauy
]

let test1_key = List.Tot.map u8_from_UInt8 [
  0x95uy; 0x8auy; 0x60uy; 0xf4uy; 0x9buy;
  0x2buy; 0x9euy; 0xe8uy; 0xaduy; 0xdbuy;
  0x9euy; 0xd9uy; 0x6euy; 0x4fuy; 0xd4uy;
  0xfbuy
]

let test1_nonce = List.Tot.map u8_from_UInt8 [
  0x52uy; 0xb1uy; 0xa5uy; 0x15uy; 0x90uy;
  0x46uy; 0x60uy; 0x43uy; 0x5euy; 0xf1uy;
  0xfeuy; 0xacuy
]

// Test2: A.2, DHKEM(Curve25519), HKDF-SHA256, AES-GCM-128
// mode: 0
// kemID: 2
// kdfID: 1
// aeadID: 1
// Base Setup

let test2_ciphersuite = DH.DH_Curve25519, AEAD.AES128_GCM, Hash.SHA2_256

let test2_info = List.Tot.map u8_from_UInt8 [
  0x4fuy; 0x64uy; 0x65uy; 0x20uy; 0x6fuy;
  0x6euy; 0x20uy; 0x61uy; 0x20uy; 0x47uy;
  0x72uy; 0x65uy; 0x63uy; 0x69uy; 0x61uy;
  0x6euy; 0x20uy; 0x55uy; 0x72uy; 0x6euy
]

let test2_skR = List.Tot.map u8_from_UInt8 [
  0x13uy; 0x9cuy; 0x8duy; 0x38uy; 0xdfuy;
  0x6duy; 0x8duy; 0xfauy; 0x2cuy; 0x8duy;
  0xe9uy; 0x8auy; 0xf6uy; 0x21uy; 0x66uy;
  0x7cuy; 0x76uy; 0xc3uy; 0xf6uy; 0x3fuy;
  0x65uy; 0xc7uy; 0xc3uy; 0x96uy; 0x6cuy;
  0x42uy; 0x58uy; 0xc3uy; 0x16uy; 0xf0uy;
  0x50uy; 0x33uy
]

let test2_skI = List.Tot.map u8_from_UInt8 [
  0xdduy; 0x5fuy; 0x95uy; 0x25uy; 0xb2uy;
  0xfauy; 0x94uy; 0xf2uy; 0x1buy; 0x72uy;
  0x37uy; 0xaduy; 0xe7uy; 0x20uy; 0x06uy;
  0xa7uy; 0x6fuy; 0x61uy; 0x2duy; 0xabuy;
  0xf0uy; 0x20uy; 0xa0uy; 0x25uy; 0x27uy;
  0xfcuy; 0xb7uy; 0x5duy; 0xb6uy; 0xbeuy;
  0xbeuy; 0x6fuy
]

let test2_skE = List.Tot.map u8_from_UInt8 [
  0x72uy; 0x27uy; 0xb3uy; 0xfeuy; 0xe6uy;
  0xb8uy; 0xe0uy; 0x1buy; 0x29uy; 0x3buy;
  0x82uy; 0x6euy; 0xc8uy; 0x67uy; 0x1buy;
  0x69uy; 0x89uy; 0x4auy; 0x11uy; 0x42uy;
  0x98uy; 0x1buy; 0xb1uy; 0x51uy; 0x3auy;
  0xfauy; 0x42uy; 0x81uy; 0x9fuy; 0x2auy;
  0x22uy; 0xefuy
]

let test2_psk = List.Tot.map u8_from_UInt8 [
  0x6duy; 0x65uy; 0x6cuy; 0x6cuy; 0x6fuy; 0x6euy
]

let test2_pskID = List.Tot.map u8_from_UInt8 [
  0x45uy; 0x6euy; 0x6euy; 0x79uy; 0x6euy;
  0x20uy; 0x44uy; 0x75uy; 0x72uy; 0x69uy;
  0x6euy; 0x20uy; 0x61uy; 0x72uy; 0x61uy;
  0x6euy; 0x20uy; 0x4duy; 0x6fuy; 0x72uy;
  0x69uy; 0x61uy
]

let test2_pkR = List.Tot.map u8_from_UInt8 [
  0x18uy; 0x6cuy; 0x39uy; 0x4euy; 0x17uy;
  0x5buy; 0x7buy; 0x16uy; 0x17uy; 0x60uy;
  0xb1uy; 0xbduy; 0x5buy; 0x82uy; 0x2auy;
  0x08uy; 0x04uy; 0xbduy; 0x06uy; 0x6buy;
  0x17uy; 0x0cuy; 0x69uy; 0x5cuy; 0x0duy;
  0xf1uy; 0x23uy; 0x17uy; 0x6fuy; 0xa7uy;
  0xdfuy; 0x6fuy
]

let test2_pkI = List.Tot.map u8_from_UInt8 [
  0x55uy; 0xf6uy; 0x18uy; 0xacuy; 0xd8uy;
  0x54uy; 0xb9uy; 0x9buy; 0xc5uy; 0x16uy;
  0x7buy; 0x72uy; 0xc6uy; 0xfbuy; 0xaauy;
  0x70uy; 0x05uy; 0x6buy; 0x6buy; 0x30uy;
  0xd7uy; 0x09uy; 0x76uy; 0x86uy; 0x58uy;
  0x46uy; 0x8euy; 0x83uy; 0x0cuy; 0x62uy;
  0xdduy; 0x5duy
]

let test2_pkE = List.Tot.map u8_from_UInt8 [
  0xefuy; 0x0buy; 0xf7uy; 0xeeuy; 0x58uy;
  0x71uy; 0x35uy; 0x68uy; 0x66uy; 0x32uy;
  0x04uy; 0xcfuy; 0x72uy; 0x0cuy; 0xffuy;
  0x64uy; 0xa8uy; 0x52uy; 0xc7uy; 0x7auy;
  0xceuy; 0x25uy; 0xf4uy; 0x78uy; 0xcfuy;
  0xe7uy; 0xdcuy; 0x07uy; 0x21uy; 0x50uy;
  0x8euy; 0x03uy
]

let test2_enc = List.Tot.map u8_from_UInt8 [
  0xefuy; 0x0buy; 0xf7uy; 0xeeuy; 0x58uy;
  0x71uy; 0x35uy; 0x68uy; 0x66uy; 0x32uy;
  0x04uy; 0xcfuy; 0x72uy; 0x0cuy; 0xffuy;
  0x64uy; 0xa8uy; 0x52uy; 0xc7uy; 0x7auy;
  0xceuy; 0x25uy; 0xf4uy; 0x78uy; 0xcfuy;
  0xe7uy; 0xdcuy; 0x07uy; 0x21uy; 0x50uy;
  0x8euy; 0x03uy
]

let test2_zz = List.Tot.map u8_from_UInt8 [
  0xe5uy; 0x7euy; 0xe0uy; 0x1euy; 0x09uy;
  0x66uy; 0x44uy; 0x18uy; 0xfcuy; 0xb3uy;
  0xdbuy; 0xa1uy; 0x2auy; 0xd3uy; 0xd1uy;
  0xfauy; 0xe7uy; 0xa2uy; 0x8fuy; 0x73uy;
  0x3euy; 0x59uy; 0x79uy; 0xd6uy; 0xe9uy;
  0xe7uy; 0xa8uy; 0xb1uy; 0x1cuy; 0xeduy;
  0x50uy; 0x3duy
]

let test2_context = List.Tot.map u8_from_UInt8 [
  0x00uy; 0x00uy; 0x02uy; 0x00uy; 0x01uy;
  0x00uy; 0x01uy; 0xefuy; 0x0buy; 0xf7uy;
  0xeeuy; 0x58uy; 0x71uy; 0x35uy; 0x68uy;
  0x66uy; 0x32uy; 0x04uy; 0xcfuy; 0x72uy;
  0x0cuy; 0xffuy; 0x64uy; 0xa8uy; 0x52uy;
  0xc7uy; 0x7auy; 0xceuy; 0x25uy; 0xf4uy;
  0x78uy; 0xcfuy; 0xe7uy; 0xdcuy; 0x07uy;
  0x21uy; 0x50uy; 0x8euy; 0x03uy; 0x18uy;
  0x6cuy; 0x39uy; 0x4euy; 0x17uy; 0x5buy;
  0x7buy; 0x16uy; 0x17uy; 0x60uy; 0xb1uy;
  0xbduy; 0x5buy; 0x82uy; 0x2auy; 0x08uy;
  0x04uy; 0xbduy; 0x06uy; 0x6buy; 0x17uy;
  0x0cuy; 0x69uy; 0x5cuy; 0x0duy; 0xf1uy;
  0x23uy; 0x17uy; 0x6fuy; 0xa7uy; 0xdfuy;
  0x6fuy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
  0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
  0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
  0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
  0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
  0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
  0x00uy; 0x00uy; 0x00uy; 0xe3uy; 0xb0uy;
  0xc4uy; 0x42uy; 0x98uy; 0xfcuy; 0x1cuy;
  0x14uy; 0x9auy; 0xfbuy; 0xf4uy; 0xc8uy;
  0x99uy; 0x6fuy; 0xb9uy; 0x24uy; 0x27uy;
  0xaeuy; 0x41uy; 0xe4uy; 0x64uy; 0x9buy;
  0x93uy; 0x4cuy; 0xa4uy; 0x95uy; 0x99uy;
  0x1buy; 0x78uy; 0x52uy; 0xb8uy; 0x55uy;
  0x55uy; 0xc4uy; 0x04uy; 0x06uy; 0x29uy;
  0xc6uy; 0x4cuy; 0x5euy; 0xfeuy; 0xc2uy;
  0xf7uy; 0x23uy; 0x04uy; 0x07uy; 0xd6uy;
  0x12uy; 0xd1uy; 0x62uy; 0x89uy; 0xd7uy;
  0xc5uy; 0xd7uy; 0xafuy; 0xcfuy; 0x93uy;
  0x40uy; 0x28uy; 0x0auy; 0xbduy; 0x2duy;
  0xe1uy; 0xabuy
]

let test2_secret = List.Tot.map u8_from_UInt8 [
  0x42uy; 0xd0uy; 0x3buy; 0x2fuy; 0x22uy;
  0xbduy; 0x9duy; 0xa6uy; 0x09uy; 0xecuy;
  0x34uy; 0x55uy; 0x49uy; 0x7cuy; 0xe2uy;
  0xebuy; 0x71uy; 0xa5uy; 0xd0uy; 0x2buy;
  0x0buy; 0x45uy; 0x6euy; 0x51uy; 0x83uy;
  0x67uy; 0x4duy; 0x14uy; 0xd4uy; 0x1cuy;
  0xa3uy; 0x9euy
]

let test2_key = List.Tot.map u8_from_UInt8 [
  0x91uy; 0x18uy; 0x3duy; 0x39uy; 0x5duy;
  0x6euy; 0xd6uy; 0x90uy; 0xeduy; 0x16uy;
  0x5auy; 0x26uy; 0xecuy; 0x9duy; 0x81uy;
  0x5cuy
]

let test2_nonce = List.Tot.map u8_from_UInt8 [
  0x79uy; 0xb0uy; 0x82uy; 0xc2uy; 0xbbuy;
  0xa5uy; 0xfcuy; 0x13uy; 0xd6uy; 0xd2uy;
  0x9fuy; 0xc7uy
]


//
// Main
//
#set-options "--ifuel 1"
let test () =

  IO.print_string "\nTest 1\n";
  IO.print_string "Ignoring for now, only Base functions exposed\n";

  IO.print_string "\nTest 2\n";
  IO.print_string "Test setupBaseI\n";
  let cs2 = test2_ciphersuite in
  assert_norm (List.Tot.length test2_skE == HPKE.size_dh_key cs2);
  assert_norm (List.Tot.length test2_pkR == HPKE.size_dh_public cs2);
  assert_norm (List.Tot.length test2_info <= HPKE.max_info);
  let res2_setupBaseI = HPKE.setupBaseI cs2 (of_list test2_skE) (of_list test2_pkR) (of_list test2_info) in

  let res2_setupBaseI =
    if None? res2_setupBaseI then (
      IO.print_string "setupBaseI returned None\n"; false
    ) else (
      let returned_pkE, returned_key, returned_nonce = Some?.v res2_setupBaseI in
      assert_norm (List.Tot.length test2_pkE == HPKE.size_dh_public cs2);
      assert_norm (List.Tot.length test2_key == HPKE.size_aead_key cs2);
      assert_norm (List.Tot.length test2_nonce == HPKE.size_aead_nonce cs2);
      let r2_a = for_all2 (fun a b -> uint_to_nat #U8 a = uint_to_nat #U8 b)
        (of_list test2_pkE) returned_pkE in
      let r2_b = for_all2 (fun a b -> uint_to_nat #U8 a = uint_to_nat #U8 b)
        (of_list test2_key) returned_key in
      let r2_c = for_all2 (fun a b -> uint_to_nat #U8 a = uint_to_nat #U8 b)
        (of_list test2_nonce) returned_nonce in
      if not r2_a then (
        IO.print_string "\nExpected pkE :";
        List.iter (fun a -> IO.print_string (UInt8.to_string (u8_to_UInt8 a))) test2_pkE;
        IO.print_string "\nComputed pkE :";
        List.iter (fun a -> IO.print_string (UInt8.to_string (u8_to_UInt8 a))) (to_list returned_pkE);
        IO.print_string "\n");
      if not r2_b then (
        IO.print_string "\nExpected key :";
        List.iter (fun a -> IO.print_string (UInt8.to_string (u8_to_UInt8 a))) test2_key;
        IO.print_string "\nComputed key :";
        List.iter (fun a -> IO.print_string (UInt8.to_string (u8_to_UInt8 a))) (to_list returned_key);
        IO.print_string "\n");
      if not r2_c then (
        IO.print_string "\nExpected nonce :";
        List.iter (fun a -> IO.print_string (UInt8.to_string (u8_to_UInt8 a))) test2_nonce;
        IO.print_string "\nComputed nonce :";
        List.iter (fun a -> IO.print_string (UInt8.to_string (u8_to_UInt8 a))) (to_list returned_nonce);
        IO.print_string "\n");

      r2_a && r2_b && r2_c
    )
  in

  if res2_setupBaseI then IO.print_string "setupBaseI succeeded\n" else IO.print_string "setupBaseI failed\n";

  res2_setupBaseI
