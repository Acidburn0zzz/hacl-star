FSTAR_HOME   ?= ../../../FStar
KREMLIN_HOME ?= ../../../kremlin
HACL_HOME    ?= ../..

OUTPUT_DIR    = $(HACL_HOME)/obj
CACHE_DIR     = $(HACL_HOME)/obj
HINT_DIR      = $(HACL_HOME)/hints
GENERATED_DIR = dist
OUT_DIR	      = $(GENERATED_DIR)

# CACHE_DIR     .checked
# OUTPUT_DIR    .krml
# HINT_DIR      .hints
# GENERATED_DIR .c, .h, .d
# OUT_DIR       .o, .a

.PHONY: lib stage1 stage2 benchmark clean clean-c distclean

lib:
	rm -f .depend && $(MAKE) .depend
	$(MAKE) stage1
	STAGE=2 $(MAKE) stage2

test: all
	dist/Hacl_

stage2: $(OUT_DIR)/libfrodo.a


benchmark: $(OUT_DIR)/libfrodo.a
	make -C $(LWEKE_HOME) USE_OPENSSL=FALSE GENERATION_A=$(GENERATION_A) tests-fstar
	(cd $(LWEKE_HOME); frodo/test_KEM_fstar)

stage1: $(GENERATED_DIR)/Makefile.include

# 1. Generation of .krml files
# - generate the F* dependency graph via `fstar --dep full`
# - verify each F* file to generate a .checked file
# - extract each .checked file into a .krml file

FSTAR_INCLUDE_DIRS = \
  params-64-cSHAKE \
  $(HACL_HOME)/specs/frodo \
  $(HACL_HOME)/specs/frodo/params-64-cSHAKE \
  $(KREMLIN_HOME)/kremlib \
  $(HACL_HOME)/specs \
  $(HACL_HOME)/lib \
  $(HACL_HOME)/code/sha3 \
  $(HACL_HOME)/obj

FSTAR_FLAGS = $(OTHERFLAGS) --cmi \
  --cache_checked_modules --cache_dir $(CACHE_DIR) --odir $(OUTPUT_DIR) \
  --already_cached 'Prims FStar LowStar C TestLib Lib Spec' \
  $(addprefix --include ,$(FSTAR_INCLUDE_DIRS))

FSTAR = $(FSTAR_HOME)/bin/fstar.exe $(FSTAR_FLAGS)

ENABLE_HINTS = --use_hints --use_hint_hashes --record_hints --query_stats

ROOTS = Hacl.Frodo.KEM.fst

.PRECIOUS: %.krml

.depend:
	$(FSTAR) --dep full $(ROOTS) --extract '* -Prims -FStar +FStar.UInt128 -LowStar -Spec -Frodo.KEM' > $@

include .depend

$(CACHE_DIR):
	mkdir -p $@

$(CACHE_DIR)/%.checked: | .depend $(CACHE_DIR)
	$(FSTAR) $< $(ENABLE_HINTS) --hint_file $(HINT_DIR)/$(notdir $<).hints && \
	touch $@

$(OUTPUT_DIR)/%.krml: | .depend
	$(FSTAR) --codegen Kremlin \
	  --extract_module $(basename $(notdir $(subst .checked,,$<))) \
	  $(notdir $(subst .checked,,$<)) && \
	touch $@

# 2. Generation of .c files

KREMLIN = $(KREMLIN_HOME)/krml

# We use -drop (deprecated) only to avoid creating unnecessary .c,.h files
$(GENERATED_DIR)/Makefile.include: $(ALL_KRML_FILES) | .depend
	$(KREMLIN) $(KREMLIB)/c/testlib.c $(KREMLIB)/c/fstar_uint128.c -skip-compilation \
	-no-prefix 'Hacl.Impl.Matrix' \
	-no-prefix 'Hacl.Impl.Frodo.Params' \
	-no-prefix 'Hacl.Impl.Frodo.Pack' \
	-no-prefix 'Hacl.Impl.Frodo.Encode' \
	-no-prefix 'Hacl.Impl.Frodo.Sample' \
	-no-prefix 'Hacl.Impl.Frodo.Gen' \
	-no-prefix 'Hacl.Impl.Frodo.KEM' \
	-no-prefix 'Hacl.Impl.Frodo.KEM.KeyGen' \
	-no-prefix 'Hacl.Impl.Frodo.KEM.Encaps' \
	-no-prefix 'Hacl.Impl.Frodo.KEM.Decaps' \
	-no-prefix 'Hacl.Frodo.KEM' \
	-no-prefix 'Hacl.Frodo.Random' \
	-no-prefix 'Hacl.SHA3' \
	-no-prefix 'Hacl.Impl.SHA3' \
	-bundle 'LowStar.Endianness' \
	-bundle 'Hacl.Frodo.KEM=Frodo.Params,Hacl.Impl.Frodo.*,Hacl.Impl.Matrix,Hacl.Frodo.*' \
	-bundle 'Lib.RandomBuffer.System' \
	-bundle 'Lib.Memzero' \
	-bundle 'Lib.*' \
	-bundle 'Spec.*' \
	-bundle 'Hacl.SHA3=Hacl.Impl.SHA3,Hacl.SHA3' \
	-library 'Hacl.AES128,C,FStar' \
	-drop 'LowStar,Spec,Prims,Lib,C.Loops.*,Frodo.KEM' \
	-tmpdir $(GENERATED_DIR) \
	$^

# The Makefile is manually staged because GNU Make does not understand
# dependencies between the Makefiles we include, i.e. it won't first generate
# the .depend, parse it, then generate Makefile.include, parse it, then
# generate dependencies among the C files
ifeq ($(STAGE),2)

# The top-level invocation guarantees that stage1 has been run and this file exists
include $(GENERATED_DIR)/Makefile.include

# 3. Collecting all of our source files, and generating corresponding objects

# ALL_C_FILES is generated by KreMLin; since the Makefile is staged via the
# inclusion of Makefile.include, the automated dependency analysis via $(CC) -MM
# also captures the dependencies between these files.
#
# KreMLin sees the fsti's for various modules and creates .h/.c files for them in
# $(GENERATED_DIR). However, we are only interested in the headers, and drop these
# (mostly empty) C files.
ALL_OUR_FILES = $(filter-out C.c FStar.c Hacl_AES128.c, $(ALL_C_FILES))
ALL_GENERATED_FILES = $(addprefix $(GENERATED_DIR)/,$(ALL_OUR_FILES))

ALL_SOURCES = \
  $(ALL_GENERATED_FILES) \
  $(HACL_HOME)/lib/c/Lib_RandomBuffer_System.c \
  $(HACL_HOME)/lib/c/Lib_Memzero.c \
  include/random.c

ALL_OBJS = $(patsubst %.c,%.o,$(ALL_SOURCES))

INCLUDE_DIRS = \
  $(GENERATED_DIR) \
  $(KREMLIN_HOME)/include \
  $(KREMLIN_HOME)/kremlib \
  $(HACL_HOME)/lib \
  $(HACL_HOME)/code/sha3

# TODO: remove the last line of warning supressions when --cmi is fixed
CFLAGS += -O3 -march=native -mtune=native -funroll-loops -fno-asynchronous-unwind-tables
CFLAGS += $(addprefix -I ,$(INCLUDE_DIRS)) -Wall -Wextra -Werror \
  -Wno-parentheses -Wno-unused-parameter -Wno-unused-variable -Wno-deprecated-declarations \
  -Wno-incompatible-pointer-types -Wno-int-conversion -Wno-int-to-pointer-cast

# GNU Make manual section 4.14
%.d: %.c
	@set -e; rm -f $@; \
	  $(CC) -MM $(CFLAGS) $< > $@.$$$$; \
	  sed 's,\($(notdir $*)\)\.o[ :]*,$(dir $@)\1.o $@ : ,g' < $@.$$$$ > $@; \
	  rm -f $@.$$$$

-include $(patsubst %.c,%.d,$(ALL_SOURCES))

$(LWEKE_HOME)/%.o:
	make -C $(LWEKE_HOME) USE_OPENSSL=FALSE GENERATION_A=$(GENERATION_A) $*.o

$(OUT_DIR):
	mkdir -p $@

# 4. Collecting all of the object files into static libraries and test executable

$(OUT_DIR)/libfrodo.a: $(ALL_OBJS) | $(OUT_DIR)
	$(AR) rcs -S $(OUT_DIR)/libfrodo.a $^
	ranlib $(OUT_DIR)/libfrodo.a

.PRECIOUS: %.o

endif # STAGE=2

# 5. Targets for interactive mode

%.fst-in:
	@echo $(addprefix --include ,$(FSTAR_INCLUDE_DIRS)) \
	  $(ENABLE_HINTS) --hint_file $(HINT_DIR)/$(basename $@).fst.hints

%.fsti-in:
	@echo $(addprefix --include ,$(FSTAR_INCLUDE_DIRS)) \
	  $(ENABLE_HINTS) --hint_file $(HINT_DIR)/$(basename $@).fsti.hints
