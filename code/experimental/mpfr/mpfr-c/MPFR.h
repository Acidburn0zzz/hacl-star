/* 
  This file was generated by KreMLin <https://github.com/FStarLang/kremlin>
  KreMLin invocation: /Users/bhargava/Desktop/repositories/kremlin/krml -fbuiltin-uint128 -fnocompound-literals -fc89-scope -fparentheses -fcurly-braces -funroll-loops 8 -warn-error +9 -add-include "kremlib.h" -add-include "FStar_UInt_8_16_32_64.h" /dist/minimal/testlib.c -skip-compilation -bundle Lib.* -bundle Spec.\* -bundle MPFR=* -bundle FStar.* -drop Lib.IntVector.Intrinsics,LowStar,Spec,Prims,Lib,C.Loops.*,Hacl.Spec.* -tmpdir mpfr-c .output/prims.krml .output/FStar_Pervasives_Native.krml .output/FStar_Pervasives.krml .output/FStar_Mul.krml .output/FStar_Preorder.krml .output/FStar_Calc.krml .output/FStar_Squash.krml .output/FStar_Classical.krml .output/FStar_StrongExcludedMiddle.krml .output/FStar_FunctionalExtensionality.krml .output/FStar_List_Tot_Base.krml .output/FStar_List_Tot_Properties.krml .output/FStar_List_Tot.krml .output/FStar_Seq_Base.krml .output/FStar_Seq_Properties.krml .output/FStar_Seq.krml .output/FStar_Math_Lib.krml .output/FStar_Math_Lemmas.krml .output/FStar_BitVector.krml .output/FStar_UInt.krml .output/FStar_UInt32.krml .output/FStar_Int.krml .output/FStar_Int64.krml .output/FStar_Int63.krml .output/FStar_Int32.krml .output/FStar_Int16.krml .output/FStar_Int8.krml .output/FStar_UInt64.krml .output/FStar_UInt63.krml .output/FStar_UInt16.krml .output/FStar_UInt8.krml .output/FStar_Int_Cast.krml .output/FStar_UInt128.krml .output/MPFR_Umul_ppmm.krml .output/FStar_Reflection_Types.krml .output/FStar_Reflection_Data.krml .output/FStar_Order.krml .output/FStar_Reflection_Basic.krml .output/FStar_Ghost.krml .output/FStar_ErasedLogic.krml .output/MPFR_Maths.krml .output/MPFR_Dyadic.krml .output/MPFR_RoundingMode.krml .output/MPFR_Lib_Spec.krml .output/MPFR_Round_Spec.krml .output/MPFR_Add1_Spec.krml .output/FStar_Set.krml .output/FStar_PropositionalExtensionality.krml .output/FStar_PredicateExtensionality.krml .output/FStar_TSet.krml .output/FStar_Monotonic_Heap.krml .output/FStar_Heap.krml .output/FStar_Map.krml .output/FStar_Monotonic_Witnessed.krml .output/FStar_Monotonic_HyperHeap.krml .output/FStar_Monotonic_HyperStack.krml .output/FStar_HyperStack.krml .output/FStar_HyperStack_ST.krml .output/FStar_Buffer.krml .output/FStar_HyperStack_All.krml .output/MPFR_Lib.krml .output/MPFR_Add1sp1_Lemma.krml .output/FStar_Exn.krml .output/FStar_ST.krml .output/FStar_All.krml .output/FStar_List.krml .output/FStar_Char.krml .output/FStar_String.krml .output/FStar_Universe.krml .output/FStar_GSet.krml .output/FStar_ModifiesGen.krml .output/FStar_Range.krml .output/FStar_Tactics_Types.krml .output/FStar_Tactics_Result.krml .output/FStar_Tactics_Effect.krml .output/FStar_Tactics_Util.krml .output/FStar_Reflection_Const.krml .output/FStar_Reflection_Derived.krml .output/FStar_Tactics_Builtins.krml .output/FStar_Reflection_Formula.krml .output/FStar_Reflection_Derived_Lemmas.krml .output/FStar_Reflection.krml .output/FStar_Tactics_Derived.krml .output/FStar_Tactics_Logic.krml .output/FStar_Tactics.krml .output/FStar_BigOps.krml .output/LowStar_Monotonic_Buffer.krml .output/LowStar_Buffer.krml .output/LowStar_BufferOps.krml .output/FStar_Kremlin_Endianness.krml .output/C_Endianness.krml .output/C.krml .output/LowStar_Modifies.krml .output/C_String.krml .output/MPFR_Exceptions_Lemma.krml .output/MPFR_Exceptions.krml .output/MPFR_Mul_Spec.krml .output/MPFR_Mul_1.krml .output/MPFR_Add1sp1.krml .output/MPFR.krml .output/FStar_HyperStack_IO.krml .output/Test_MPFR.krml
  F* version: 731d7fa9
  KreMLin version: 0aca989d
 */

#include "kremlib.h"
#ifndef __MPFR_H
#define __MPFR_H


#include "kremlib.h"
#include "FStar_UInt_8_16_32_64.h"

#define MPFR_RoundingMode_MPFR_RNDN 0
#define MPFR_RoundingMode_MPFR_RNDZ 1
#define MPFR_RoundingMode_MPFR_RNDU 2
#define MPFR_RoundingMode_MPFR_RNDD 3
#define MPFR_RoundingMode_MPFR_RNDA 4

typedef uint8_t MPFR_RoundingMode_mpfr_rnd_t;

typedef struct MPFR_Lib_mpfr_struct_s
{
  int64_t mpfr_prec;
  int32_t mpfr_sign;
  int64_t mpfr_exp;
  uint64_t *mpfr_d;
}
MPFR_Lib_mpfr_struct;

extern int32_t
(*MPFR_mpfr_add1sp1)(
  MPFR_Lib_mpfr_struct *x0,
  MPFR_Lib_mpfr_struct *x1,
  MPFR_Lib_mpfr_struct *x2,
  MPFR_RoundingMode_mpfr_rnd_t x3,
  int64_t x4
);

extern int32_t
(*MPFR_mpfr_mul_1)(
  MPFR_Lib_mpfr_struct *x0,
  MPFR_Lib_mpfr_struct *x1,
  MPFR_Lib_mpfr_struct *x2,
  MPFR_RoundingMode_mpfr_rnd_t x3,
  int64_t x4
);

#define __MPFR_H_DEFINED
#endif
