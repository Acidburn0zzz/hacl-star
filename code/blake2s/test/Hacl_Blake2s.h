/* 
  This file was generated by KreMLin <https://github.com/FStarLang/kremlin>
  KreMLin invocation: /opt/kremlin/krml -skip-compilation -no-prefix Hacl.Test.Blake2s -bundle Lib.* -bundle Spec.* -bundle C=C.Endianness -bundle Hacl.Blake2s=Hacl.Impl.*,Hacl.Blake2s -library C,FStar -drop LowStar,Spec,Prims,Lib,C.Loops.*,C,C.* -add-include "c/Lib_PrintBuffer.h" -add-include "C_String.h" -tmpdir blake2s-c .output/prims.krml .output/FStar_Pervasives_Native.krml .output/FStar_Pervasives.krml .output/FStar_Preorder.krml .output/FStar_Calc.krml .output/FStar_Squash.krml .output/FStar_Classical.krml .output/FStar_StrongExcludedMiddle.krml .output/FStar_FunctionalExtensionality.krml .output/FStar_List_Tot_Base.krml .output/FStar_List_Tot_Properties.krml .output/FStar_List_Tot.krml .output/FStar_Seq_Base.krml .output/FStar_Seq_Properties.krml .output/FStar_Seq.krml .output/FStar_Mul.krml .output/FStar_Math_Lib.krml .output/FStar_Math_Lemmas.krml .output/FStar_BitVector.krml .output/FStar_UInt.krml .output/FStar_UInt32.krml .output/FStar_Int.krml .output/FStar_Int16.krml .output/FStar_Reflection_Types.krml .output/FStar_Reflection_Data.krml .output/FStar_Order.krml .output/FStar_Reflection_Basic.krml .output/FStar_Ghost.krml .output/FStar_ErasedLogic.krml .output/FStar_UInt64.krml .output/FStar_Set.krml .output/FStar_PropositionalExtensionality.krml .output/FStar_PredicateExtensionality.krml .output/FStar_TSet.krml .output/FStar_Monotonic_Heap.krml .output/FStar_Heap.krml .output/FStar_Map.krml .output/FStar_Monotonic_HyperHeap.krml .output/FStar_Monotonic_HyperStack.krml .output/FStar_HyperStack.krml .output/FStar_Monotonic_Witnessed.krml .output/FStar_HyperStack_ST.krml .output/FStar_HyperStack_All.krml .output/FStar_Int64.krml .output/FStar_Int63.krml .output/FStar_Int32.krml .output/FStar_Int8.krml .output/FStar_UInt63.krml .output/FStar_UInt16.krml .output/FStar_UInt8.krml .output/FStar_Int_Cast.krml .output/FStar_UInt128.krml .output/FStar_Int_Cast_Full.krml .output/FStar_Int128.krml .output/Lib_IntTypes.krml .output/Lib_RawIntTypes.krml .output/FStar_Char.krml .output/FStar_Exn.krml .output/FStar_ST.krml .output/FStar_All.krml .output/FStar_List.krml .output/FStar_String.krml .output/FStar_Reflection_Const.krml .output/FStar_Reflection_Derived.krml .output/FStar_Reflection_Derived_Lemmas.krml .output/Lib_LoopCombinators.krml .output/Lib_Sequence.krml .output/FStar_Universe.krml .output/FStar_GSet.krml .output/FStar_ModifiesGen.krml .output/FStar_Range.krml .output/FStar_Tactics_Types.krml .output/FStar_Tactics_Result.krml .output/FStar_Tactics_Effect.krml .output/FStar_Tactics_Util.krml .output/FStar_Tactics_Builtins.krml .output/FStar_Reflection_Formula.krml .output/FStar_Reflection.krml .output/FStar_Tactics_Derived.krml .output/FStar_Tactics_Logic.krml .output/FStar_Tactics.krml .output/FStar_BigOps.krml .output/LowStar_Monotonic_Buffer.krml .output/LowStar_Buffer.krml .output/Spec_Loops.krml .output/LowStar_BufferOps.krml .output/C_Loops.krml .output/FStar_Kremlin_Endianness.krml .output/C_Endianness.krml .output/C.krml .output/LowStar_Modifies.krml .output/C_String.krml .output/Lib_ByteSequence.krml .output/Spec_Blake2.krml .output/Lib_Loops.krml .output/LowStar_ImmutableBuffer.krml .output/Lib_Buffer.krml .output/Lib_ByteBuffer.krml .output/Hacl_Impl_Blake2s.krml .output/Hacl_Blake2s.krml .output/Lib_PrintBuffer.krml .output/Hacl_Test_Blake2s.krml
  F* version: 8d4580e6
  KreMLin version: fec2dd6f
 */

#include "kremlin/internal/target.h"
#include "kremlin/internal/callconv.h"
#include "kremlin/internal/builtin.h"
#include "kremlin/internal/debug.h"
#include "kremlin/internal/types.h"

/* #include "kremlin/lowstar_endianness.h" */
/* #include "kremlin/fstar_int.h" */
#include "lowstar_endianness.h"
#ifndef __Hacl_Blake2s_H
#define __Hacl_Blake2s_H


#include "c/Lib_PrintBuffer.h"
#include "C_String.h"

typedef uint32_t *Hacl_Blake2s_hash_wp;

typedef uint8_t *Hacl_Blake2s_block_p;

void Hacl_Blake2s_blake2s_init(uint32_t *hash, uint32_t kk, uint8_t *k, uint32_t nn);

void Hacl_Blake2s_blake2s_update_block(uint32_t *hash, uint64_t prev, uint8_t *d);

void
Hacl_Blake2s_blake2s_update_last(uint32_t *hash, uint64_t prev, uint32_t len, uint8_t *last1);

void Hacl_Blake2s_blake2s_finish(uint32_t output, uint8_t *hash, uint32_t *nn);

void
Hacl_Blake2s_blake2s(
  uint32_t nn,
  uint8_t *output,
  uint32_t ll,
  uint8_t *d,
  uint32_t kk,
  uint8_t *k
);

#define __Hacl_Blake2s_H_DEFINED
#endif
