/* 
  This file was generated by KreMLin <https://github.com/FStarLang/kremlin>
  KreMLin invocation: /opt/kremlin/krml -skip-compilation -no-prefix Hacl.Test.Blake2b.Incremental -no-prefix Hacl.Blake2b -bundle Lib.* -bundle Spec.* -bundle C=C.Endianness -library C,FStar -drop LowStar,Spec,Prims,Lib,C.Loops.*,C -add-include "c/Lib_PrintBuffer.h" -tmpdir blake2b-c .output/prims.krml .output/FStar_Pervasives_Native.krml .output/FStar_Pervasives.krml .output/FStar_Preorder.krml .output/FStar_Calc.krml .output/FStar_Squash.krml .output/FStar_Classical.krml .output/FStar_StrongExcludedMiddle.krml .output/FStar_FunctionalExtensionality.krml .output/FStar_List_Tot_Base.krml .output/FStar_List_Tot_Properties.krml .output/FStar_List_Tot.krml .output/FStar_Seq_Base.krml .output/FStar_Seq_Properties.krml .output/FStar_Seq.krml .output/FStar_Mul.krml .output/FStar_Math_Lib.krml .output/FStar_Math_Lemmas.krml .output/FStar_BitVector.krml .output/FStar_UInt.krml .output/FStar_UInt32.krml .output/FStar_Int.krml .output/FStar_Int16.krml .output/FStar_Reflection_Types.krml .output/FStar_Reflection_Data.krml .output/FStar_Order.krml .output/FStar_Reflection_Basic.krml .output/FStar_Ghost.krml .output/FStar_ErasedLogic.krml .output/FStar_UInt64.krml .output/FStar_Exn.krml .output/FStar_Set.krml .output/FStar_Monotonic_Witnessed.krml .output/FStar_PropositionalExtensionality.krml .output/FStar_PredicateExtensionality.krml .output/FStar_TSet.krml .output/FStar_Monotonic_Heap.krml .output/FStar_Heap.krml .output/FStar_ST.krml .output/FStar_All.krml .output/Lib_LoopCombinators.krml .output/FStar_UInt8.krml .output/FStar_Int64.krml .output/FStar_Int63.krml .output/FStar_Int32.krml .output/FStar_Int8.krml .output/FStar_UInt63.krml .output/FStar_UInt16.krml .output/FStar_Int_Cast.krml .output/FStar_UInt128.krml .output/FStar_Int_Cast_Full.krml .output/FStar_Int128.krml .output/Lib_IntTypes.krml .output/Lib_RawIntTypes.krml .output/Lib_Sequence.krml .output/Lib_ByteSequence.krml .output/Spec_Blake2.krml .output/Spec_Blake2_Incremental.krml .output/FStar_Map.krml .output/FStar_Monotonic_HyperHeap.krml .output/FStar_Monotonic_HyperStack.krml .output/FStar_HyperStack.krml .output/FStar_HyperStack_ST.krml .output/FStar_Universe.krml .output/FStar_GSet.krml .output/FStar_ModifiesGen.krml .output/FStar_Range.krml .output/FStar_Tactics_Types.krml .output/FStar_Tactics_Result.krml .output/FStar_Tactics_Effect.krml .output/FStar_Tactics_Util.krml .output/FStar_Reflection_Const.krml .output/FStar_Char.krml .output/FStar_List.krml .output/FStar_String.krml .output/FStar_Reflection_Derived.krml .output/FStar_Tactics_Builtins.krml .output/FStar_Reflection_Formula.krml .output/FStar_Reflection_Derived_Lemmas.krml .output/FStar_Reflection.krml .output/FStar_Tactics_Derived.krml .output/FStar_Tactics_Logic.krml .output/FStar_Tactics.krml .output/FStar_BigOps.krml .output/LowStar_Monotonic_Buffer.krml .output/LowStar_Buffer.krml .output/LowStar_BufferOps.krml .output/FStar_HyperStack_All.krml .output/FStar_Kremlin_Endianness.krml .output/C_Endianness.krml .output/C.krml .output/Spec_Loops.krml .output/C_Loops.krml .output/Lib_Loops.krml .output/LowStar_ImmutableBuffer.krml .output/Lib_Buffer.krml .output/Lib_ByteBuffer.krml .output/Hacl_Impl_Blake2b.krml .output/Hacl_Impl_Blake2b_Incremental.krml .output/Lib_PrintBuffer.krml .output/LowStar_Modifies.krml .output/C_String.krml .output/Hacl_Blake2b.krml .output/Hacl_Test_Blake2b_Incremental.krml
  F* version: 8d4580e6
  KreMLin version: fec2dd6f
 */

#include "kremlib.h"
#ifndef __Hacl_Impl_Blake2b_H
#define __Hacl_Impl_Blake2b_H

#include "FStar.h"
#include "c/Lib_PrintBuffer.h"

typedef uint64_t Hacl_Impl_Blake2b_word_t;

typedef uint64_t *Hacl_Impl_Blake2b_vector_wp;

typedef uint64_t *Hacl_Impl_Blake2b_block_wp;

typedef uint8_t *Hacl_Impl_Blake2b_block_p;

typedef uint64_t *Hacl_Impl_Blake2b_hash_wp;

typedef uint32_t Hacl_Impl_Blake2b_index_t;

extern uint32_t Hacl_Impl_Blake2b_size_word;

extern uint32_t Hacl_Impl_Blake2b_size_block;

extern uint64_t Hacl_Impl_Blake2b_const_iv[8U];

extern uint32_t Hacl_Impl_Blake2b_const_sigma[160U];

extern uint32_t Hacl_Impl_Blake2b_rTable_B[4U];

uint64_t Hacl_Impl_Blake2b_get_iv(uint32_t s);

void Hacl_Impl_Blake2b_set_iv(uint64_t *hash);

void Hacl_Impl_Blake2b_set_iv_sub(uint64_t *b);

uint32_t Hacl_Impl_Blake2b_get_sigma(uint32_t s);

uint32_t Hacl_Impl_Blake2b_get_sigma_sub(uint32_t start, uint32_t i);

uint32_t Hacl_Impl_Blake2b_get_r(uint32_t s);

void Hacl_Impl_Blake2b_g1(uint64_t *wv, uint32_t a, uint32_t b, uint32_t r);

void Hacl_Impl_Blake2b_g2(uint64_t *wv, uint32_t a, uint32_t b, uint64_t x);

void
Hacl_Impl_Blake2b_blake2_mixing(
  uint64_t *wv,
  uint32_t a,
  uint32_t b,
  uint32_t c,
  uint32_t d,
  uint64_t x,
  uint64_t y
);

void Hacl_Impl_Blake2b_blake2_round1(uint64_t *wv, uint64_t *m, uint32_t i);

void Hacl_Impl_Blake2b_blake2_round2(uint64_t *wv, uint64_t *m, uint32_t i);

void Hacl_Impl_Blake2b_blake2_round(uint64_t *wv, uint64_t *m, uint32_t i);

void
Hacl_Impl_Blake2b_blake2_compress1(
  uint64_t *wv,
  uint64_t *s,
  uint64_t *m,
  FStar_UInt128_uint128 offset1,
  bool flag
);

void Hacl_Impl_Blake2b_blake2_compress2(uint64_t *wv, uint64_t *m);

void Hacl_Impl_Blake2b_blake2_compress3_inner(uint64_t *wv, uint32_t i, uint64_t *s);

void Hacl_Impl_Blake2b_blake2_compress3(uint64_t *wv, uint64_t *s);

void
Hacl_Impl_Blake2b_blake2_compress(
  uint64_t *s,
  uint64_t *m,
  FStar_UInt128_uint128 offset1,
  bool flag
);

void
Hacl_Impl_Blake2b_blake2b_update_block(uint64_t *hash, FStar_UInt128_uint128 prev, uint8_t *d);

void Hacl_Impl_Blake2b_blake2b_init_hash(uint64_t *hash, uint32_t kk, uint32_t nn);

void
Hacl_Impl_Blake2b_blake2b_init_branching(
  uint64_t *hash,
  uint8_t *key_block,
  uint32_t kk,
  uint8_t *k,
  uint32_t nn
);

void Hacl_Impl_Blake2b_blake2b_init(uint64_t *hash, uint32_t kk, uint8_t *k, uint32_t nn);

void
Hacl_Impl_Blake2b_blake2b_update_last(
  uint64_t *hash,
  FStar_UInt128_uint128 prev,
  uint32_t len,
  uint8_t *last1
);

void Hacl_Impl_Blake2b_blake2b_finish(uint32_t nn, uint8_t *output, uint64_t *hash);

void Hacl_Impl_Blake2b_blake2b_update(uint64_t *hash, uint32_t ll, uint8_t *d, uint32_t kk);

void
Hacl_Impl_Blake2b_blake2b(
  uint32_t nn,
  uint8_t *output,
  uint32_t ll,
  uint8_t *d,
  uint32_t kk,
  uint8_t *k
);

#define __Hacl_Impl_Blake2b_H_DEFINED
#endif
