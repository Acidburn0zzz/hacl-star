include{:fstar}{:open} "Vale.Def.Types_s"
include{:fstar}{:open} "Vale.Arch.Types"
include{:fstar}{:open} "Vale.X64.Machine_s"
include{:fstar}{:open} "Vale.X64.State"
include{:fstar}{:open} "Vale.X64.Decls"
include{:fstar}{:open} "Vale.X64.QuickCode"
include{:fstar}{:open} "Vale.X64.CPU_Features_s"

module Vale.X64.InsBasic

#verbatim{:interface}
open Vale.Def.Types_s
open Vale.Arch.Types
open Vale.X64.Machine_s
open Vale.X64.State
open Vale.X64.Decls
open Vale.X64.QuickCode
unfold let memory = Vale.X64.Memory.mem // avoid conflict with "var{...} mem" vs. "mem" from X64.Memory
unfold let stack_t = Vale.X64.Stack_i.stack // avoid conflict with "var{...} stack" vs. "stack" from X64.Stack_i
open Vale.X64.CPU_Features_s
#endverbatim

#verbatim
open Vale.X64
open Vale.X64.StateLemmas
open Vale.X64.InsLemmas
open Vale.X64.Taint_Semantics
open Vale.X64.CPU_Features_s
open Vale.X64.Memory
open Vale.X64.Stack_i
module I = Vale.X64.Instructions_s
module S = Vale.X64.Machine_Semantics_s
friend Vale.X64.StateLemmas
friend Vale.X64.Decls
#endverbatim

#reset-options "--initial_fuel 5 --max_fuel 5 --max_ifuel 2 --z3rlimit 20"

type memory:Type(1) := Vale.X64.Memory.mem;
type stack_t:Type(1) := Vale.X64.Stack_i.stack;

var ok:bool {:state ok()};
var rax:nat64 {:state reg(rRax)};
var rbx:nat64 {:state reg(rRbx)};
var rcx:nat64 {:state reg(rRcx)};
var rdx:nat64 {:state reg(rRdx)};
var rsi:nat64 {:state reg(rRsi)};
var rdi:nat64 {:state reg(rRdi)};
var rbp:nat64 {:state reg(rRbp)};
var rsp:nat64 {:state reg(rRsp)};
var r8:nat64  {:state reg(rR8)};
var r9:nat64  {:state reg(rR9)};
var r10:nat64 {:state reg(rR10)};
var r11:nat64 {:state reg(rR11)};
var r12:nat64 {:state reg(rR12)};
var r13:nat64 {:state reg(rR13)};
var r14:nat64 {:state reg(rR14)};
var r15:nat64 {:state reg(rR15)};
var efl:nat64 {:state flags()};
var mem:memory {:state mem()};
var stack:stack_t {:state stack()};
var memTaint:memtaint {:state memTaint()};
var stackTaint:memtaint {:state stackTaint()};

operand_type reg64:nat64 :=
| inout rax | inout rbx | inout rcx | inout rdx
| inout rsi | inout rdi | inout rbp | in rsp
| inout r8 | inout r9 | inout r10 | inout r11
| inout r12 | inout r13 | inout r14 | inout r15
;
operand_type shift_amt64:nat64 := in rcx | const;
operand_type reg_opr64:nat64 := reg64;
operand_type Mem(in base:reg64, inline offset:int, ghost b:buffer64, ghost index:int, inline t:taint):int;
operand_type Stack(in base:reg64, inline offset:int, inline t:taint):int;
operand_type dst_opr64:nat64 @ va_operand := reg_opr64 | Mem | Stack;
operand_type opr64:nat64 @ va_operand := dst_opr64 | const;

procedure Mov64(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Mov64, dst, src))}
    ensures
        dst == old(src);
{
}

procedure Cmovc64(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Cmovc64, dst, src))}
    reads efl;
    ensures
        if cf(efl) then dst = old(src) else dst = old(dst);
{
}

procedure Add64(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Add64, dst, src))}
    modifies
        efl;
    requires
        src + dst < pow2_64;
    ensures
        dst == old(dst + src);
{
}

procedure Add64Wrap(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Add64, dst, src))}
    modifies
        efl;
    ensures
        dst == old(add_wrap64(dst, src));
        cf(efl) == old(dst + src >= pow2_64);
{
}

procedure AddLea64(out dst:dst_opr64, in src1:opr64, in src2:opr64)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_AddLea64, dst, src1, src2))}
    requires
        max_one_mem(@src1, @src2);
        src1 + src2 < pow2_64;
    ensures
        dst == old(src1) + old(src2);
{
}

procedure Adc64(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_AddCarry64, dst, src))}
    modifies
        efl;
    requires
        src + dst + 1 < pow2_64;
    ensures
        dst == old(dst + src + (if cf(efl) then 1 else 0));
        cf(efl) == old(dst + src + (if cf(efl) then 1 else 0)) >= pow2_64;
{
}

procedure Adc64Wrap(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_AddCarry64, dst, src))}
    modifies
        efl;
    ensures
        dst == old(add_wrap64(add_wrap64(dst, src), (if cf(efl) then 1 else 0)));
        cf(efl) == old(dst + src + (if cf(efl) then 1 else 0)) >= pow2_64;
{
}

#reset-options "--initial_fuel 5 --max_fuel 5 --max_ifuel 2 --z3rlimit 20 --z3cliopt smt.arith.nl=true"
procedure Adcx64Wrap(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Adcx64, dst, src))}
    requires adx_enabled;
    modifies
        efl;
    ensures
        dst == old(add_wrap64(add_wrap64(dst, src), (if cf(efl) then 1 else 0)));
        efl == update_cf(old(efl), old(dst + src + (if cf(efl) then 1 else 0)) >= pow2_64);
{
    assert old(add_wrap64(add_wrap64(dst, src), (if cf(efl) then 1 else 0)) == (dst + src + (if cf(efl) then 1 else 0)) % pow2_64); // REVIEW: shouldn't be necessary
}

#reset-options "--initial_fuel 5 --max_fuel 5 --max_ifuel 2 --z3rlimit 20"
procedure Adox64Wrap(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Adox64, dst, src))}
    requires adx_enabled;
    modifies
        efl;
    ensures
        dst == old(add_wrap64(add_wrap64(dst, src), (if overflow(efl) then 1 else 0)));
        efl == update_of(old(efl), old(dst + src + (if overflow(efl) then 1 else 0)) >= pow2_64);
{
}

procedure Sub64(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Sub64, dst, src))}
    requires
        0 <= dst - src;
    modifies
        efl;
    ensures
        dst == old(dst) - old(src);
{
}

procedure Sub64Wrap(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Sub64, dst, src))}
    modifies
        efl;
    ensures
        dst == old(dst - src) % pow2_64;
        cf(efl) == old(dst - src < 0);
{
}

procedure Sbb64(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Sbb64, dst, src))}
    modifies
        efl;
    ensures
        dst == old(dst - (src + (if cf(efl) then 1 else 0))) % pow2_64;
        cf(efl) == old(dst - (src + (if cf(efl) then 1 else 0))) < 0;
{
}

#reset-options "--max_fuel 0 --max_ifuel 0 --using_facts_from 'Prims FStar.UInt'"

#verbatim
let lemma_fundamental_div_mod (a b:nat64) :
  Lemma (pow2_64 `op_Multiply` (FStar.UInt.mul_div #64 a b) + (FStar.UInt.mul_mod #64 a b) == a `op_Multiply` b)
  =
  FStar.Math.Lemmas.lemma_div_mod (a `op_Multiply` b) pow2_64
#endverbatim

#reset-options "--initial_fuel 5 --max_fuel 5 --max_ifuel 2 --z3rlimit 20"

ghost procedure lemma_fundamental_div_mod(ghost a:nat64, ghost b:nat64) {:infer_spec} extern;

procedure Mul64Wrap(in src:opr64)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Mul64, src))}
    modifies
        efl;
        rax;
        rdx;
    ensures
        pow2_64 * rdx + rax == old(rax * src);
{
    lemma_fundamental_div_mod(old(rax), old(src));
}

procedure Mulx64(out dst_hi:dst_opr64, out dst_lo:dst_opr64, in src:opr64)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Mulx64, dst_hi, dst_lo, src))}
    requires bmi2_enabled; @dst_hi != @dst_lo;
    reads
        rdx;
    ensures
        pow2_64 * dst_hi + dst_lo == old(rdx * src);
{
    lemma_fundamental_div_mod(old(rdx), old(src));
}

ghost procedure lemma_mul_nat(ghost x:nat, ghost y:nat) {:infer_spec} extern;
ghost procedure lemma_mul_in_bounds(ghost a:nat64, ghost b:nat64) {:infer_spec} extern;

procedure IMul64(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_IMul64, dst, src))}
    requires
        dst * src < pow2_64;
    modifies
        efl;
    ensures
        dst == old(dst * src);
{
    lemma_mul_nat(old(dst), old(src));
    lemma_mul_in_bounds(old(dst), old(src));
}

procedure Xor64(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr_annotate(I.ins_Xor64, S.AnnotateXor64(), dst, src))}
    modifies
        efl;
    ensures
        dst == old(ixor64(dst,src));
        !overflow(efl);
        !cf(efl);

{
}

procedure And64(inout dst:dst_opr64, in src:opr64)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_And64, dst, src))}
    modifies
        efl;
    ensures
        dst == old(iand64(dst,src));
{
}

procedure Shl64(inout dst:dst_opr64, in amt:shift_amt64)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Shl64, dst, amt))}
    modifies
        efl;
//    requires
//        0 <= src < 64;
    ensures
        dst == old(ishl64(dst, amt));
{
}

procedure Shr64(inout dst:dst_opr64, in amt:shift_amt64)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Shr64, dst, amt))}
    modifies
        efl;
    ensures
        dst == old(ishr64(dst, amt));
{
}

procedure Cpuid_AES()
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Cpuid))}
    requires rax = 1;
    modifies rax; rbx; rcx; rdx;
    ensures
        (iand64(rcx, 0x2000000) > 0) == aesni_enabled;
        (iand64(rcx, 0x2) > 0) == pclmulqdq_enabled;
{
    cpuid_features();
}

procedure Cpuid_Sha()
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Cpuid))}
    requires
        rax = 7;
        rcx = 0;
    modifies rax; rbx; rcx; rdx;
    ensures (iand64(rbx, 0x20000000) > 0) == sha_enabled;
{
    cpuid_features();
}

procedure Cpuid_Adx_Bmi2()
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Cpuid))}
    requires
        rax = 7;
        rcx = 0;
    modifies rax; rbx; rcx; rdx;
    ensures
        (iand64(rbx, 0x100) > 0) == bmi2_enabled;
        (iand64(rbx, 0x80000) > 0) == adx_enabled;
{
    cpuid_features();
}

procedure Cpuid_Avx()
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Cpuid))}
    requires rax = 1;
    modifies rax; rbx; rcx; rdx;
    ensures (iand64(rcx, 0x10000000) > 0) == avx_enabled;
{
    cpuid_features();
}

procedure Cpuid_Avx2()
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Cpuid))}
    requires
        rax = 7;
        rcx = 0;
    modifies rax; rbx; rcx; rdx;
    ensures (iand64(rbx, 0x20) > 0) == avx2_enabled;
{
    cpuid_features();
}

procedure Nat64Equal(out dst:reg_opr64, inout src:reg_opr64)
    {:public}
    {:quick exportOnly}
    modifies efl;
    ensures if old(src = 0xFFFFFFFFFFFFFFFF) then dst = 0 else dst = 1;
{
    Sub64Wrap(src, 0xFFFFFFFFFFFFFFFF);
    Mov64(dst, 0);
    Adc64(dst, 0);
}