include "Vale.X64.InsBasic.vaf"
include{:fstar}{:open} "Vale.Def.Types_s"
include{:fstar}{:open} "Vale.Arch.Types"
include{:fstar}{:open} "Vale.Arch.HeapTypes_s"
include{:fstar}{:open} "Vale.Arch.HeapImpl"
include{:fstar}{:open} "Vale.X64.Machine_s"
include{:fstar}{:open} "Vale.X64.Memory"
include{:fstar}{:open} "Vale.X64.Stack_i"
include{:fstar}{:open} "Vale.X64.Memory_Sems"
include{:fstar}{:open} "Vale.X64.Stack_Sems"
include{:fstar}{:open} "Vale.X64.State"
include{:fstar}{:open} "Vale.X64.Decls"
include{:fstar}{:open} "Vale.X64.QuickCode"
include{:fstar}{:open} "Vale.X64.CPU_Features_s"

module Vale.X64.InsMem

#verbatim{:interface}
open Vale.Def.Types_s
open Vale.Arch.HeapTypes_s
open Vale.Arch.HeapImpl
open Vale.X64.Machine_s
open Vale.X64.Memory
open Vale.X64.Stack_i
open Vale.X64.State
open Vale.X64.Decls
open Vale.X64.QuickCode
open Vale.X64.InsBasic
open Vale.X64.CPU_Features_s
#endverbatim

#verbatim
open Vale.X64
open Vale.X64.StateLemmas
open Vale.X64.InsLemmas
open Vale.Arch.Heap
open Vale.Arch.HeapImpl
module I = Vale.X64.Instructions_s
module S = Vale.X64.Machine_Semantics_s
module P = Vale.X64.Print_s
open Vale.X64.Taint_Semantics

friend Vale.X64.Decls
#endverbatim

//function operator([]) #[a:Type(0), b:Type(0)](m:FStar.Map.t(a, b), key:a):b extern;
//function operator([]) (m:heap0, b:Vale.X64.Memory.buffer64):fun(int) -> nat64 extern;

#reset-options "--initial_fuel 2 --max_fuel 2 --max_ifuel 2 --z3rlimit 20"

procedure Mem_in(in base:reg64, inline offset:int, ghost b:buffer64, ghost index:int, inline t:taint)
    returns(o:opr)
    {:operand}
    reads
        heap0;
    extern;

procedure Mem_lemma(ghost base:va_operand, ghost offset:int, ghost b:buffer64, ghost index:int, ghost t:taint)
    {:public}
    {:quick exportOnly}
    {:typecheck false}
    reads
        mem; heap0; memLayout;
    requires
        base is OReg;
        valid_src_addr(heap0, b, index);
        valid_taint_buf64(b, heap0, memLayout.vl_taint, t);
        eval_operand(base, this) + offset == buffer_addr(b, heap0) + 8 * index;
    ensures
        valid_operand(va_opr_code_Mem(base, offset, t), this);
        load_mem64(buffer_addr(b, heap0) + 8 * index, mem) == buffer_read(b, index, heap0);
{
    lemma_opr_Mem(this, base, offset, b, index, t);
}

procedure DestroyHeaplets()
    {:public}
    {:quick exportOnly}
    reads
        mem; heap0;
    ensures
        vale_heap_data_eq(mem, heap0);
{
    reveal_mem_inv();
}

procedure Load64_buffer(
        out dst:dst_opr64, in src:reg_opr64, inline offset:int, inline t:taint,
        ghost b:buffer64, ghost index:int)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Mov64, dst, OMem(tuple(MReg(get_reg(src), offset), t))))}
    reads
        heap0; memLayout;
    requires
        valid_src_addr(heap0, b, index);
        valid_taint_buf64(b, heap0, memLayout.vl_taint, t);
        src + offset == buffer_addr(b, heap0) + 8 * index;
    ensures
        dst == buffer64_read(b, index, heap0);
{
    low_lemma_load_mem64_full(b, #nat(index), this.vs_heap, t);
}

procedure Store64_buffer(
        in dst:reg_opr64, in src:reg_opr64, inline offset:int, inline t:taint,
        ghost b:buffer64, ghost index:int)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Mov64, OMem(tuple(MReg(get_reg(dst), offset), t)), src))}
    reads
        memLayout;
    modifies
        heap0;
    requires
        valid_dst_addr(heap0, b, index);
        valid_taint_buf64(b, heap0, memLayout.vl_taint, t);
        dst + offset == buffer_addr(b, heap0) + 8 * index;
    ensures
        modifies_mem(loc_buffer(b), old(heap0), heap0);
        heap0 == old(buffer64_write(b, index, src, heap0));
        valid_taint_buf64(b, heap0, memLayout.vl_taint, t);
{
    low_lemma_store_mem64_full(b, #nat(index), old(src), old(this).vs_heap, t);
}

procedure LoadBe64_buffer(
        out dst:dst_opr64, in src:reg_opr64, inline offset:int, inline t:taint,
        ghost b:buffer64, ghost index:int)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_MovBe64, dst, OMem(tuple(MReg(get_reg(src), offset), t))))}
    reads
        heap0; memLayout;
    requires
        movbe_enabled;
        valid_src_addr(heap0, b, index);
        valid_taint_buf64(b, heap0, memLayout.vl_taint, t);
        src + offset == buffer_addr(b, heap0) + 8 * index;
    ensures
        dst == reverse_bytes_nat64(buffer64_read(b, index, heap0));
{
    low_lemma_load_mem64_full(b, #nat(index), this.vs_heap, t);
}

procedure StoreBe64_buffer(
        in dst:reg_opr64, in src:reg_opr64, inline offset:int, inline t:taint,
        ghost b:buffer64, ghost index:int)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_MovBe64, OMem(tuple(MReg(get_reg(dst), offset), t)), src))}
    reads
        memLayout;
    modifies
        heap0;
    requires
        movbe_enabled;
        valid_dst_addr(heap0, b, index);
        valid_taint_buf64(b, heap0, memLayout.vl_taint, t);
        dst + offset == buffer_addr(b, heap0) + 8 * index;
    ensures
        modifies_mem(loc_buffer(b), old(heap0), heap0);
        heap0 == old(buffer64_write(b, index, reverse_bytes_nat64(src), heap0));
        valid_taint_buf64(b, heap0, memLayout.vl_taint, t);
{
    low_lemma_store_mem64_full(b, #nat(index), old(reverse_bytes_nat64(src)), old(this).vs_heap, t);
}

