#!/usr/bin/env bash

set -o pipefail
set -e

# This script mostly detects the presence of ocamlfind as well as various ocaml
# packages

detect_ocamlfind () {
  package=$1
  loc=$(ocamlfind query $package)
  r=$?
  if [[ $r == 0 ]]; then
    echo "... found $package in $loc"
  else
    echo "OCaml package $package not found"
  fi
  return $r
}

detect_ocaml () {
  # Detect ocamlfind
  loc=$(which ocamlfind)
  r=$?
  if [[ $r == 0 ]]; then
    echo "... found ocamlfind in $loc"
  else
    echo "ocamlfind not found"
    return 1
  fi
  # Detect packages
  for p in ctypes ctypes.foreign; do
    detect_ocamlfind $p || return 1
  done
}

detect_uint128 () {
  local file=$(mktemp /tmp/testint128_XXXXXXX.c)
  echo "unsigned __int128 x = 0;" > $file
  cc -c $file -o /dev/null
}

detect_x64 () {
  [[ $(uname -m) == "x86_64" ]]
}

detect_arm () {
  [[ $(uname -m | cut -c 1-3) == "arm" ]] || [[ $(uname -m | cut -c 1-5) == "aarch64" ]];
}

detect_arm_cc () {
  local file=$(mktemp /tmp/testvec128_XXXXXXX.c)
  cat > $file <<EOF
#include <libintvector.h>

int main () {
  uint8_t block[32] = { 0 };
  Lib_IntVector_Intrinsics_vec128 b1 = Lib_IntVector_Intrinsics_vec128_load_le(block);
  Lib_IntVector_Intrinsics_vec128 b2 = Lib_IntVector_Intrinsics_vec128_load_le(block + 16);
  Lib_IntVector_Intrinsics_vec128 test = Lib_IntVector_Intrinsics_vec128_interleave_high64(b1, b2);
  return 0;
}
EOF
  cc -I. -march=armv8-a+simd -c $file -o /dev/null
}

# Main auto-detection

echo -n > Makefile.config

if detect_arm; then
  echo "... detected ARM platform"
  echo "... $(uname -m) does not support 256-bit arithmetic"
  echo "BLACKLIST += $(ls *CP256*.c *_256.c *_Vec256.c | xargs)" >> Makefile.config
  echo "... $(uname -m) does not support legacy vale stubs"
  echo "BLACKLIST += evercrypt_vale_stubs.c" >> Makefile.config
  echo "CFLAGS += -DLib_IntVector_Intrinsics_vec256=\"void *\"" >> Makefile.config
  if detect_arm_cc; then
    echo "... cc can cross-compile to ARM64 with SIMD"
    echo "CFLAGS_128 = -march=armv8-a+simd" >> Makefile.config
  else
    echo "cc cannot compile 128-bit vector arithmetic, disabling"
    echo "BLACKLIST += $(ls *CP128*.c *_128.c *_Vec128.c | xargs)" >> Makefile.config
  fi
fi

if ! detect_x64; then
  echo "$(uname -m) does not support inline x64 assembly, disabling Curve64"
  echo "BLACKLIST += Hacl_Curve25519_64.c $(ls Hacl_HPKE_Curve64_*.c | xargs)" >> Makefile.config
  echo "$(uname -m) does not support _addcarry_u64, disabling ECDSA"
  echo "BLACKLIST += Hacl_ECDSA.c $(ls Hacl_HPKE_P256_*.c | xargs)" >> Makefile.config
fi

if ! detect_uint128; then
  # Explicitly not supporting compilation with MSVC, which would entail not
  # defining KRML_VERIFIED_UINT128.
  echo "cc does not support unsigned __int128 -- using a fallback verified implementation"
  echo "CFLAGS += -DKRML_VERIFIED_UINT128" >> Makefile.config
fi

if ! detect_ocaml; then
  echo "OCaml bindings disabled"
  echo "DISABLE_OCAML_BINDINGS=1" >> Makefile.config
fi
